#!/usr/bin/env bash

THIS_DIR=$(cd $(dirname $0); pwd)
cd $THIS_DIR

update() {
  git pull
  git submodule update --init --recursive
  install_rocks
}

# Will install luarocks on THIS_DIR/.luarocks
install_luarocks() {
  git clone https://github.com/keplerproject/luarocks.git
  cd luarocks
  git checkout tags/v2.2.2 # Current stable

  PREFIX="$THIS_DIR/.luarocks"

  ./configure --prefix=$PREFIX --sysconfdir=$PREFIX/luarocks --force-config

  RET=$?; if [ $RET -ne 0 ];
    then echo "Error. Exiting."; exit $RET;
  fi

  make build && make install
  RET=$?; if [ $RET -ne 0 ];
    then echo "Error. Exiting.";exit $RET;
  fi

  cd ..
  rm -rf luarocks
}

install_rocks() {
  ./.luarocks/bin/luarocks install luasocket
  RET=$?; if [ $RET -ne 0 ];
    then echo "Error. Exiting."; exit $RET;
  fi

  ./.luarocks/bin/luarocks install oauth
  RET=$?; if [ $RET -ne 0 ];
    then echo "Error. Exiting."; exit $RET;
  fi

  ./.luarocks/bin/luarocks install redis-lua
  RET=$?; if [ $RET -ne 0 ];
    then echo "Error. Exiting."; exit $RET;
  fi

  ./.luarocks/bin/luarocks install lua-cjson
  RET=$?; if [ $RET -ne 0 ];
    then echo "Error. Exiting."; exit $RET;
  fi

  ./.luarocks/bin/luarocks install fakeredis
  RET=$?; if [ $RET -ne 0 ];
    then echo "Error. Exiting."; exit $RET;
  fi

  ./.luarocks/bin/luarocks install xml
  RET=$?; if [ $RET -ne 0 ];
    then echo "Error. Exiting."; exit $RET;
  fi

  ./.luarocks/bin/luarocks install feedparser
  RET=$?; if [ $RET -ne 0 ];
    then echo "Error. Exiting."; exit $RET;
  fi

  ./.luarocks/bin/luarocks install serpent
  RET=$?; if [ $RET -ne 0 ];
    then echo "Error. Exiting."; exit $RET;
  fi
}

supercli_upstart() {

  printf "%s\n" "
description "Superclis upstart script."

respawn
respawn limit 15 5

start on runlevel [2345]
stop on shutdown

setuid $(whoami)
exec /bin/sh $(pwd)/merbot
" | sudo tee /etc/init/supercli.conf > /dev/null

  [[ -f /etc/init/supercli.conf ]] && printf "%s\n" '

  Upstart script installed to /etc/init/supercli.conf.
  Now you can start supercli with:

    sudo start supercli

  Or stop supercli with:

    sudo stop supercli

'
}

supercli_systemd() {

  SVCDIR="$HOME/.config/systemd/user"

  [[ -d $SVCDIR ]] || mkdir -p $SVCDIR

  printf "%s\n" "
[Unit]
Description=Supercli systemd service for $(whoami)

[Service]
ExecStart=$(pwd)/supercli

[Install]
WantedBy=default.target
" > $SVCDIR/supercli.service

  systemctl --user enable supercli.service

  [[ -f $SVCDIR/supercli.service ]] && printf "%s\n" "

  Systemd unit installed to:
  $HOME/.config/systemd/user/supercli.service
  And has been enabled.

  To start supercli:
    systemctl --user start supercli

  To stop supercli:
    systemctl --user stop supercli

  To shows supercli status:
    systemctl --user status supercli

  To disable supercli service:
    systemctl --user disable supercli.service

"

}

install() {
  git pull
  git submodule update --init --recursive
  patch -i "patches/lua-tg.get_message.block_user.res_user.export_chat_link.patch" -p 0 --batch --forward
  patch -i "patches/lua-tg.media_caption.patch" -p 0 --batch --forward
  RET=$?;

  cd tg
  if [ $RET -ne 0 ]; then
    autoconf -i
  fi
  ./configure --enable-liblua --enable-json --disable-python && make

  RET=$?; if [ $RET -ne 0 ]; then
    echo "Error. Exiting."; exit $RET;
  fi
  cd ..
  install_luarocks
  install_rocks
}

if [ "$1" = "install" ]; then
  install
elif [ "$1" = "update" ]; then
  update
elif [ "$1" = "upstart" ]; then
  supercli_upstart
elif [ "$1" = "systemd" ]; then
  supercli_systemd
else
  if [ ! -f ./tg/telegram.h ]; then
    echo "tg not found"
    echo "Run $0 install"
    exit 1
  fi

  if [ ! -f ./tg/bin/telegram-cli ]; then
    echo "tg binary not found"
    echo "Run $0 install"
    exit 1
  fi

  ./tg/bin/telegram-cli -k ./tg/tg-server.pub -s ./bot/bot.lua -l 1 -E --disable-link-preview $@
fi
